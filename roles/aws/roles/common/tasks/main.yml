---
 - name: Enforce the webgroup exists
   ec2_group:
    name: "{{secGroupWeb}}"
    description: This is an webgroup
    region: "{{ regionDefault }}"
    rules:      ### Inbound Rules
      - proto: icmp # Allowing Ping
        from_port: -1 # icmp type, -1 = any type
        to_port:  -1 # icmp subtype, -1 = any subtype
        cidr_ip: 0.0.0.0/0
      - proto: tcp # Allowing SSH
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp # Allowing SSH
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp # Allowing SSH
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress: #### Outbound Rules
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp ### Allowing http traffic from the ec2 to public
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0

 - name: Enforce dbgroup exists
   ec2_group:
    name: "{{secGroupDB}}"
    description: This is an dbgroup
    region: "{{regionDefault}}"
    rules:      ### Inbound Rules
      - proto: icmp # Allowing Ping
        from_port: -1 # icmp type, -1 = any type
        to_port:  -1 # icmp subtype, -1 = any subtype
        cidr_ip: 0.0.0.0/0
      - proto: tcp # Allowing MySQL
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0
 
 - name: Enforce nagiosgroup exists
   ec2_group:
    name: "{{secGroupNagios}}"
    description: This is an nagiosgroup
    region: "{{regionDefault}}"
    rules:      ### Inbound Rules
      - proto: tcp # Allowing NRPE
        from_port: 5666
        to_port: 5666
        cidr_ip: 0.0.0.0/0

 - name: Creating EC2 instance for web servers for zone 
   ec2:
     group: '{{item.group}}'
     exact_count: 1
     instance_type: "{{instanceType}}"
     image: '{{item.image}}'
     region: "{{regionDefault}}"
     zone: '{{item.zone}}'
     wait: yes
     wait_timeout: 100
     key_name: "{{keyPairName}}"
     count_tag: "{{item.tags}}"
     instance_tags: "{{item.tags}}"
   register: ec2
   with_items: "{{ec2_instances}}"

 - name: Getting the Public IP of the ec2 web servers
   shell: aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag-value,Values=http" --output text --query "Reservations[*].Instances[*].{ID:PublicIpAddress}"
   register: pubIPs

 - name: Wait for SSH
   wait_for:
     host: "{{ item }}"
     port: 22
     delay: 10
     timeout: 90
     state: started
   with_items: "{{pubIPs.stdout_lines|list}}"

 - name: Enforce ELB exists
   local_action:
    module: ec2_elb_lb
    name: "{{elbNameWeb}}"
    security_group_names: "{{secGroupWeb}}"
    state: present
    region: "{{regionDefault}}"
    zones: "{{zonesDefault}}"
    listeners:
      - protocol: "{{elbProtocol}}" # options are http, https, ssl, tcp
        load_balancer_port: "{{elbLBport}}"
        instance_port: "{{elbInstPort}}"
        proxy_protocol: True

 - name: Getting the list of the instance ids to be add in the ELB
   shell: aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag-value,Values=http" --output text --query "Reservations[*].Instances[*].{ID:InstanceId}"
   register: instvalues

 - name: Register the newly created instances to the ELB
   local_action:
     module: ec2_elb
     instance_id: "{{item}}"
     ec2_elbs: "{{elbNameWeb}}"
     region: "{{regionDefault}}"
     wait: no
     state: present
   with_items:
      - "{{instvalues.stdout_lines|list}}"

 - name: Uploading my image to S3 for serving the webserver
   s3:
    bucket: kobigha
    object: /images/1.jpg
    src: roles/webservers/files/1.jpg
    mode: put
    permission: public-read

