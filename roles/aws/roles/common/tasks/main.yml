---
 - name: Make sure the webgroup exists else create
   ec2_group:
    name: webgroup
    description: This is an webgroup
    region: us-east-1
    rules:      ### Inbound Rules
      - proto: icmp # Allowing Ping
        from_port: -1 # icmp type, -1 = any type
        to_port:  -1 # icmp subtype, -1 = any subtype
        cidr_ip: 0.0.0.0/0
      - proto: tcp # Allowing SSH
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress: #### Outbound Rules
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0

 - name: Makesure dbgroup exists
   ec2_group:
    name: dbgroup
    description: This is an dbgroup
    region: us-east-1
    rules:      ### Inbound Rules
      - proto: icmp # Allowing Ping
        from_port: -1 # icmp type, -1 = any type
        to_port:  -1 # icmp subtype, -1 = any subtype
        cidr_ip: 0.0.0.0/0
      - proto: tcp # Allowing SSH
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0

 - name: Creating EC2 instance for web servers
   ec2:
    key_name: ec2all
    instance_type: t2.micro
    image: ami-0b33d91d
    state: present
    region: us-east-1
    zone: us-east-1a
    wait: no
    group: webgroup
    instance_tags:
      Name: web1
      type: http
    exact_count: 2
    count_tag:
      Name: web2
      type: http
    #assign_public_ip: yes

 - name: Creating EC2 instance for web servers
   ec2:
    key_name: ec2all
    instance_type: t2.micro
    image: ami-0b33d91d
    state: present
    region: us-east-1
    zone: us-east-1b
    wait: no
    group: webgroup
    instance_tags:
      Name: web3
      type: http
    exact_count: 2
    count_tag:
      Name: web4
      type: http
    #assign_public_ip: yes

# - name: Creating ELB
#   local_action:
#    module: ec2_elb_lb
#    name: HTTPLoadBalancer
#    security_group_names: webgroup
#    state: present
#    region: us-east-1
#    zones:
#      - us-east-1a
#      - us-east-1b
#    listeners:
#      - protocol: http # options are http, https, ssl, tcp
#        load_balancer_port: 80
#        instance_port: 80
#        proxy_protocol: True
#
# - name: Gathering ec2 facts
#   action: ec2_facts
#
# - name: Instance Register
#   local_action:
#     module: ec2_elb
#     instance_id: "{{ ansible_ec2_instance_id }}"
#     ec2_elbs: webgroup
#     state: present

 - name: Uploading my image to S3 for serving the webserver
   s3:
    bucket: kobigha
    object: /images/1.jpg
    src: files/1.jpg
    mode: put

